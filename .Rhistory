length(m_seq)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 3), each = 10)
rep(c(0, 1, 2), each = 10)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "BobOBetterman")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
str(x)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0 / 0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
x[c(3, 5, 7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
?identical
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?"matrix"
?matrix
my_matrix2 <- matrix(1:20, nrow = 4)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
?colnames
colnames(my_data) <- cnames
my_data
T == T
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
5 !== 7
5 != 7
!(5 == 7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
idential('twins', 'twins')
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
Sys.Date()
mean(c(2, 4, 5))
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4, 5, 10))
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
?std
?sd
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram("I'm ready to go to bed now...")
submit()
mad_libs(place = "New York", adjective = "sexy", noun = "pussy")
submit()
"I" %p% "love" %p% "R!"
library(swirl)
getwd
getwd()
swirl()
head(flags)
dim(flags)
viewinfo()
class(flags)
as.list(flags)
cls_list<- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
?sapply
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 6, 6))
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
dim(flags)
str(flags)
summary(flags)
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
library(swirl)
swirl()
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(20, 10)
sample(1:20, 10)
LETTERS
letters
sample(LETTERS)
flips <- sample(c(0, 1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
rbinom(100, size = 1, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, 100, 25)
?rpois
rpois(5, 10)
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
library(swirl)
swirl()
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
?strptime
strptime(t3, "%B %d, %Y %H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
data(cars)
?cars
head(cars)
name(cars)
names(cars)
tail(cars)
summary(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(cars$dist, cars$speed)
?plot
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(cars, main = "My Plot")
?plot
plot(cars, sub = "My Plot Subtitle")
?par
plot(cars, col = 2)
plot(cars, xlim = c(10, 15))
?points
plot(cars, pch = 2)
library(mtcars)
mtcars
data(mtcars)
summary(mtcars)
?boxplot
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
getwd()
list.dirs()
list.files()
dataset_url <- "http://s3.amazonaws.com/practice_assignment/diet_data.zip"
download.file(dataset_url, "diet_data.zip")
unzip("diet_data.zip", exdir = "diet_data")
list.files("diet_data")
andy <- read.csv("diet_data/Andy.csv")
head(andy)
length(andy$Day)
dim(andy)
str(andy)
summary(andy)
names(andy)
andy[1, "Weight"]
andy[30, "Weight"]
andy[which(andy$Day == 30), "Weight"]
andy[which[, "Day"], "Weight"]
andy[which(andy[, "Day"] == 30), "Weight"]
?subset
subset(andy$Weight, andy$Day == 30)
andy_start <- andy[1, "Weight"]
andy_end <- andy[30, "Weight"]
andy_loss <- andy_start - andy_end
andy_loss
?list.files
files <- list.files("diet_data")
files
files[1]
files[2]
files[3:5]
head(read.csv(files[3]))
files_full <- list.files("diet_data", full.names = TRUE)
files_full
head(read.csv(files_full[3]))
andy_david <- rbind(andy, read.csv(files_full[2]))
head(andy_david)
tails(andy_david)
tail(andy_david)
day_25 <- andy_david[which(andy_david$Day == 25), ]
day_25
for(i in 1:5) {print(i)}
for(i in 1:5) {}
for(i in 1:5) {
dat <- rbind(dat, read.csv(files_full[i]))
}
dat <- data.frame
dat <- data.frame()
for(i in 1:5) {
dat <- rbind(dat, read.csv(files_full[i]))
}
str(dat)
for(i in 1:5){
dat2 <- data.frame()
dat2 <- rbind(dat2, read.csv(files_full[i]))
}
str(dat2)
head(dat2)
median(dat$Weight)
dat
?median
median(dat$Weight, na.rm = TRUE)
dat_30 <- dat[which(dat[, "Day"] == 30),]
dat_30
median(dat_30$Weight)
source('~/.active-rstudio-document', echo=TRUE)
weightmedian(directory = "diet_data", day = 20)
weightmedian("diet_data", 4)
weightmedian("diet_data", 17)
summary(files_full)
tmp <- vector(mode = "list", length = length(files_full))
summary(tmp)
for(i in seq_along(files_full)) {}
for(i in seq_along(files_full)) {
tmp[[i]] <- read.csv(files_full[[i]])
}
str(tmp)
str(lapply(files_full, read.csv))
str(tmp[[1]])
head(tmp[[1]][, "Day"])
output <- do.call(rbind, tmp)
str(output)
library(httr)
myapp = oauth_app("github", key="BobOBetterman")
myapp
a = 1
a
b = c(1, 2, 6)
b
dim(b, 2, 2)
b = dim(2)
b
b = c(1, 2, 6)
b <- dim(2)
b
?dim
b = c(1, 2, 6)
dim(b) = 2
b
dim(b) <- 2
dim(b) = 3
b
sig = sign_oauth1.0(myapp, token="4c3dee4326ab1f145ece", token_secret = "c6e132fb6b3be644ffb7ff92fee705f3f7199011")
req <- GET("https://api.github.com/users/jtleek/repos", sig)
q()
library(httr)
oauth_endpoints("github")
?oauth_endpoints
myapp <- oauth_app("github", key = "4c3dee4326ab1f145ece", secret = "c6e132fb6b3be644ffb7ff92fee705f3f7199011")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(httpuv)
installed.packages("httpuv")
install.packages("httpuv")
library(httr)
library(httpuv)
myapp <- oauth_app("github", key = "4c3dee4326ab1f145ece", secret = "c6e132fb6b3be644ffb7ff92fee705f3f7199011")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
myapp <- oauth_app("github", key = "4c3dee4326ab1f145ece", secret = "c6e132fb6b3be644ffb7ff92fee705f3f7199011")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
names(req)
head(req)
head(req)
stop_for_status(req)
content(req)
names(req)
head(req)
names(req)
req$date
req$url
req$times
req$headers
req$request
str(req)
?GET
?content
json1 = content(req)
json1
head(names)
names(jjson1)
names(json1)
head(json1)
json1$created
json1$created_at
json1[[6]]
json1[[6]]$created_at
q()
?mtcars
list.files
list.files()
setwd("getData/quiz3")
list.files()
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv", destfile = "GDP.csv", mmode = "wb")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv", destfile = "GDP.csv", mode = "wb")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv", destfile = "edu.csv", mode = "wb")
gdp <- read.csv("GDP.csv")
edu <- read.csv("edu.csv")
head(gdp)
str(gdp)
str(edu)
summarize(gdp)
summary(gdp)
summary(edu)
names(gdp)
head(gdp$X)
gdp$X
names(edu)
edu$CountryCode
intsec <- intersect(gdp$X, edu$CountryCode)
length(intsec)
head(gdp)
tail(gdp)
?intersect
tail(edu)
?match
match(gdp$X, edu$CountryCode)
mat <- match(gdp$X, edu$CountryCode)
matRm <- na.rm(mat)
matRm <- rm.na(mat)
matRm <- mat[!is.na(mat)]
is.na(gdp$X)
gdp$X
head(gdp)
names(gdp)
?read.csv
gdp <- read.csv("GDP.csv", skip = 4)
head(gdp)
gdp$X.1
str(gdp)
as.numeric(gdp$X.1)
gdp <- read.csv("GDP.csv", skip = 4, nrows = 190)
str(gdp)
summary(gdp$X.1)
head(gdp)
intsec <- intersect(gdp$X, edu$CountryCode)
length(intsec)
merDat <- merge(gdp, edu, by.x = "X", by.y = "CountryCode", all = TRUE)
head(merDat)
library(plyr)
?arrange
arDat <- arrange(merDat, desc(X.1))
head(arDat)
arDat$X.1
arDat$X[13]
arDat$X.3[13]
names(arDat)
head(arDat[13])
head(arDat[12])
summary(arDat[12])
?sapply
sapply(arDat$X.1, arDat$Income.Group, mean)
tapply(arDat$X.1, arDat$Income.Group, mean)
?tapply
tapply(arDat$X.1, arDat$Income.Group, FUN = mean, na.rm = TRUE)
quantile(arDat$X.1)
?quantile
quantile(arDat$X.1, probs = seq(0, 1, 0.2), na.rm = TRUE)
quan <- quantile(arDat$X.1, probs = seq(0, 1, 0.2), na.rm = TRUE)
str(quan)
arDat$quant <- cut(arDat$X.1, breaks = quantile(arDat$X.1, probs = seq(0, 1, 0.2), na.rm = TRUE))
head(arDat)
tail(arDat)
table(arDat$quant, arDat$Income.Group)
setwd(".")
setwd("..")
dir.create("project")
setwd("project")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip", destfile = "accDat.zip", mode = "wb")
